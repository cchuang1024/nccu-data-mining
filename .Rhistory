setwd("D:/Codes/NCCUCodes/nccu-data-science/hw4-cchuang1024")
install.packages('ca')
install.packages(c("FactoMineR", "factoextra"))
setwd("D:/Codes/NCCUCodes/nccu-data-science/hw4-cchuang1024")
library(shiny)
runApp()
install.packages('DT')
runApp()
install.package('rconnect')
install.packages('rconnect')
rsconnect::setAccountInfo(name='cchuang1024', token='6152B96312E9C5381CAA9C71C421A321', secret='79Kg/haUuzZ0Dk5E9KcYaTW0ZLM7TVdee2Dc34ig')
install.packages('RODBC')
install.packages('RWeka')
install.packages('arules')
install.packages("reprex")
install.packages('apriori')
data(adult)
data(Adult)
data("Adule")
data("Adult")
setwd("D:/Codes/NCCUCodes/nccu-data-mining")
x <- c("A", "B", "C")
df <- as.data.frame(matrix(numeric(), nrow=0, ncol=length(x)))
df
colnames(df)
colnames(df) = c
colnames(df) = x
df
main()
library(RODBC)
#
connect <- function(db_file){
db <- odbcDriverConnect(paste("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
DBQ=", db_file, sep=""))
return(db)
}
# sql1 <- "
# select
#     customer_id,
#     time_id,
#     store_id,
#     product_id as item
# from sales_fact_1998;"
query_transaction <- function(conn) {
sql2 <- "
select
trim(str(ft.customer_id)) & '-' & trim(str(ft.time_id)) & '-' & trim(str(ft.store_id)) as tid,
pc.product_category as item
from sales_fact_1998 as ft, product as pd, product_class as pc
where pd.product_id = ft.product_id
and pd.product_class_id = pc.product_class_id;"
tx <- as.data.frame(sqlQuery(conn, sql2))
tx[, 1] <- as.character(tx[, 1])
tx[, 2] <- as.character(tx[, 2])
return (tx)
}
query_product_class <- function(conn) {
sql_pc <- "select distinct product_category from product_class;"
pc <- as.data.frame(sqlQuery(conn, sql_pc))
pc[, 1] <- as.character(pc[, 1])
return (pc)
}
build_init_df <- function(tx, pc){
columns <- c("tid", as.vector(t(pc)[1,]))
df <- as.data.frame(matrix(ncol = length(columns), nrow=0, dimnames = list(NULL,columns)))
tids <- unique(tx$tid)
# init all rows to 0
for(tid in tids){
row <- c(tid, rep(0, len - 1))
df <- rbind(df, row)
}
return (df)
}
main <- function(){
mdb <- ".\\foodmart2000.mdb"
conn <- connect(mdb)
tx <- query_transaction(conn)
pc <- query_product_class(conn)
df <- build_init_df(tx, pc)
head(df)
}
main()
library(RODBC)
#
connect <- function(db_file){
db <- odbcDriverConnect(paste("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
DBQ=", db_file, sep=""))
return(db)
}
# sql1 <- "
# select
#     customer_id,
#     time_id,
#     store_id,
#     product_id as item
# from sales_fact_1998;"
query_transaction <- function(conn) {
sql2 <- "
select
trim(str(ft.customer_id)) & '-' & trim(str(ft.time_id)) & '-' & trim(str(ft.store_id)) as tid,
pc.product_category as item
from sales_fact_1998 as ft, product as pd, product_class as pc
where pd.product_id = ft.product_id
and pd.product_class_id = pc.product_class_id;"
tx <- as.data.frame(sqlQuery(conn, sql2))
tx[, 1] <- as.character(tx[, 1])
tx[, 2] <- as.character(tx[, 2])
return (tx)
}
query_product_class <- function(conn) {
sql_pc <- "select distinct product_category from product_class;"
pc <- as.data.frame(sqlQuery(conn, sql_pc))
pc[, 1] <- as.character(pc[, 1])
return (pc)
}
build_init_df <- function(tx, pc){
columns <- c("tid", as.vector(t(pc)[1,]))
len <- length(columns)
df <- as.data.frame(matrix(ncol = length(columns), nrow=0, dimnames = list(NULL,columns)))
tids <- unique(tx$tid)
# init all rows to 0
for(tid in tids){
row <- c(tid, rep(0, len - 1))
df <- rbind(df, row)
}
return (df)
}
main <- function(){
mdb <- ".\\foodmart2000.mdb"
conn <- connect(mdb)
tx <- query_transaction(conn)
pc <- query_product_class(conn)
df <- build_init_df(tx, pc)
head(df)
}
main()
library(RODBC)
#
connect <- function(db_file){
db <- odbcDriverConnect(paste("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
DBQ=", db_file, sep=""))
return(db)
}
# sql1 <- "
# select
#     customer_id,
#     time_id,
#     store_id,
#     product_id as item
# from sales_fact_1998;"
query_transaction <- function(conn) {
sql2 <- "
select
trim(str(ft.customer_id)) & '-' & trim(str(ft.time_id)) & '-' & trim(str(ft.store_id)) as tid,
pc.product_category as item
from sales_fact_1998 as ft, product as pd, product_class as pc
where pd.product_id = ft.product_id
and pd.product_class_id = pc.product_class_id;"
tx <- as.data.frame(sqlQuery(conn, sql2))
tx[, 1] <- as.character(tx[, 1])
tx[, 2] <- as.character(tx[, 2])
return (tx)
}
query_product_class <- function(conn) {
sql_pc <- "select distinct product_category from product_class;"
pc <- as.data.frame(sqlQuery(conn, sql_pc))
pc[, 1] <- as.character(pc[, 1])
return (pc)
}
build_init_df <- function(tx, pc){
columns <- c("tid", as.vector(t(pc)[1,]))
len <- length(columns)
df <- as.data.frame(matrix(ncol = length(columns), nrow=0, dimnames = list(NULL,columns)))
tids <- head(unique(tx$tid), n = 10)
# init all rows to 0
for(tid in tids){
row <- c(tid, rep(0, len - 1))
df <- rbind(df, row)
}
return (df)
}
main <- function(){
mdb <- ".\\foodmart2000.mdb"
conn <- connect(mdb)
tx <- query_transaction(conn)
pc <- query_product_class(conn)
df <- build_init_df(tx, pc)
head(df)
}
main()
library(RODBC)
#
connect <- function(db_file){
db <- odbcDriverConnect(paste("Driver={Microsoft Access Driver (*.mdb, *.accdb)};
DBQ=", db_file, sep=""))
return(db)
}
# sql1 <- "
# select
#     customer_id,
#     time_id,
#     store_id,
#     product_id as item
# from sales_fact_1998;"
query_transaction <- function(conn) {
sql2 <- "
select
trim(str(ft.customer_id)) & '-' & trim(str(ft.time_id)) & '-' & trim(str(ft.store_id)) as tid,
pc.product_category as item
from sales_fact_1998 as ft, product as pd, product_class as pc
where pd.product_id = ft.product_id
and pd.product_class_id = pc.product_class_id;"
tx <- as.data.frame(sqlQuery(conn, sql2))
tx[, 1] <- as.character(tx[, 1])
tx[, 2] <- as.character(tx[, 2])
return (tx)
}
query_product_class <- function(conn) {
sql_pc <- "select distinct product_category from product_class;"
pc <- as.data.frame(sqlQuery(conn, sql_pc))
pc[, 1] <- as.character(pc[, 1])
return (pc)
}
build_init_df <- function(tx, pc){
columns <- c("tid", as.vector(t(pc)[1,]))
len <- length(columns)
df <- as.data.frame(matrix(ncol = length(columns), nrow=0, dimnames = list(NULL,columns)))
print(df)
tids <- head(unique(tx$tid), n = 10)
# init all rows to 0
for(tid in tids){
for (ci in 1:len){
}
}
return (df)
}
main <- function(){
mdb <- ".\\foodmart2000.mdb"
conn <- connect(mdb)
tx <- query_transaction(conn)
pc <- query_product_class(conn)
df <- build_init_df(tx, pc)
head(df)
}
main()
c('a', rep(0, 3))
list('a', rep(0, 3))
rbind(c("a"), rep(0, 3))
library(arules)
#Reading in the book data
bookbaskets <- read.transactions("bookdata.tsv.gz", format="single",
sep="\t", cols=c("userid", "title"), rm.duplicates=T)
class(bookbaskets)
bookbaskets
dim(bookbaskets)
colnames(bookbaskets)[1:5]
rownames(bookbaskets)[1:5]
# the distribution of transaction sizes
basketSizes <- size(bookbaskets)
summary(basketSizes)
# Examining data
quantile(basketSizes, probs=seq(0,1,0.1))
library(ggplot2)
ggplot(data.frame(count=basketSizes)) +
geom_density(aes(x=count), binwidth=1) +
scale_x_log10()
# Frequent books
bookFreq <- itemFrequency(bookbaskets)
sum(bookFreq)
bookCount <- (bookFreq/sum(bookFreq))*sum(basketSizes)
summary(bookCount)
orderedBooks <- sort(bookCount, decreasing=T)
orderedBooks[1:10]
orderedBooks[1]/dim(bookbaskets)[1]
# Finding the association rules
#   Preprocessing
bookbaskets_use <- bookbaskets[basketSizes > 1]
dim(bookbaskets_use)
# Decide support & confidence
100/dim(bookbaskets_use)[1]
rules <- apriori(bookbaskets_use, parameter =list(support = 0.002, confidence=0.75))
summary(rules)
# Scoring rules
measures <- interestMeasure(rules,
measure=c("coverage", "fishersExactTest"),
transactions=bookbaskets_use)
# The five most confident rules discovered in the data
inspect(head((sort(rules, by="confidence")), n=5))
# Finding rules with restrictions
brules <- apriori(bookbaskets_use,
parameter =list(support = 0.001, confidence=0.6),
appearance=list(rhs=c("The Lovely Bones: A Novel"),
default="lhs"))
summary(brules)
# Inspecting rules
brulesConf <- sort(brules, by="confidence")
inspect(head(brulesConf, n=5))
inspect(head(lhs(brulesConf), n=5))
# Inspecting rules with restrictions
brulesSub <- subset(brules, subset=!(lhs %in% "Lucky : A Memoir"))
brulesConf <- sort(brulesSub, by="confidence")
inspect(head(lhs(brulesConf), n=5))
library(arules)
#Reading in the book data
bookbaskets <- read.transactions("bookdata.tsv.gz", format="single",
sep="\t", cols=c("userid", "title"), rm.duplicates=T)
class(bookbaskets)
bookbaskets
dim(bookbaskets)
colnames(bookbaskets)[1:5]
rownames(bookbaskets)[1:5]
# the distribution of transaction sizes
basketSizes <- size(bookbaskets)
summary(basketSizes)
